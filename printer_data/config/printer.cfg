[include mainsail.cfg]
[include stealthburner_leds.cfg]
[include Sensorless-Homing.cfg]
[include KAMP_Settings.cfg]
[include KOMB.cfg]
[include _KOMB_Variables.cfg]

# From https://github.com/EricZimmerman/VoronTools/blob/main/Sensorless.md
#[force_move]
#enable_force_move: True

#####################################################################
#   UUID Setting
#####################################################################
[mcu]
canbus_uuid:5bb8276ab82e    

[mcu EBBCan]
canbus_uuid: 9e622b24983e

[input_shaper]
shaper_freq_x: 56.8
shaper_type_x: mzv
shaper_freq_y: 42.8
shaper_type_y: mzv

[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 8000
max_z_velocity: 25
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
# 	X/Y Stepper Settings
#####################################################################

## X Stepper on Motor1(B Motor)
[stepper_x]
step_pin: PE6
dir_pin: !PE5
enable_pin: !PC14
microsteps: 64
rotation_distance: 40
# DK Configure for sensorless homing
# endstop_pin: ^EBBCan: PB6
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: 0
position_endstop: 304
position_max: 304

##--------------------------------------------------------------------
homing_speed: 20   #Max 100
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: PC13
interpolate: False
run_current: 1.2
sense_resistor: 0.110
stealthchop_threshold: 0
# DK Configure for sensorless homing
# Must connect DIAG pin to M1-Stop on Manta (PF4), and NOT EBBCan: PB6
# A value of 60 was OK at room temp but not enough in a heated chamber and sometimes gave false homes
diag_pin: ^PF4
driver_SGTHRS: 57 # 255 is most sensitive value, 0 is least sensitive

## Y Stepper on Motor2 (A Motor)
[stepper_y]
step_pin: PE2
dir_pin: !PE1
enable_pin: !PE4
microsteps: 64
rotation_distance: 40
# DK Configure for sensorless homing
# endstop_pin: ^PF3
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: 0
position_endstop: 306
position_max: 306

##--------------------------------------------------------------------
homing_speed: 20  #Max 100
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: PE3
interpolate: False
run_current: 1.2
sense_resistor: 0.110
stealthchop_threshold: 0
# DK Configure for sensorless homing
# A value of 65 was OK at room temp but not enough in a heated chamber and sometimes gave false homes
diag_pin: ^PF3
driver_SGTHRS: 64 # 255 is most sensitive value, 0 is least sensitive

#####################################################################
# 	Z Stepper Settings
#####################################################################

## Rear Stepper (from electronic side)-  MOTOR3
[stepper_z1]
step_pin: PB8
dir_pin: PB7
enable_pin: !PE0
rotation_distance: 4
microsteps: 16

[tmc2209 stepper_z1]
uart_pin: PB9
interpolate: True
run_current: 1.0
sense_resistor: 0.110
stealthchop_threshold: 0

##	Left Stepper (from electronic side)- Motor4
[stepper_z2]
step_pin: PB4
dir_pin: PB3
enable_pin: !PB6
rotation_distance: 4
microsteps: 16

[tmc2209 stepper_z2]
uart_pin: PB5
interpolate: True
run_current: 1.0
sense_resistor: 0.110
stealthchop_threshold: 0

##	Right Stepper (from electronic side)- Motor5
[stepper_z]
step_pin: PG13
dir_pin: PG12
enable_pin: !PG15
rotation_distance: 4
microsteps: 16

endstop_pin: probe:z_virtual_endstop
position_max: 290

##--------------------------------------------------------------------
position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

[tmc2209 stepper_z]
uart_pin: PG14
interpolate: True
run_current: 1.0
sense_resistor: 0.110
stealthchop_threshold: 0

[extruder]
step_pin: EBBCan: PD0
# DK Had to reverse this from the default
dir_pin: !EBBCan: PD1
enable_pin: !EBBCan: PD2
microsteps: 16
rotation_distance: 22.3387668335
gear_ratio: 50:10
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: EBBCan: PB13
# From MPX Wiki: With Rapido / Rapido 2, use Use ATC Semitec 104NT-4-R025H42G instead of the stock generic 3950
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: EBBCan: PA3
pressure_advance: 0.032
#control: pid
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982
min_temp: 0
max_temp: 280
min_extrude_temp: 250
# DK Added for KAMP https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging?tab=readme-ov-file#adaptive-purging
max_extrude_cross_section: 5
# DK Added for Filament macros  https://github.com/rootiest/zippy-klipper_config/blob/master/extras/simple-m600.cfg
max_extrude_only_distance: 75.0    # Default is 50mm

[tmc2209 extruder]
uart_pin: EBBCan: PA15
run_current: 0.3
stealthchop_threshold: 999999

# Part Cooling Fan
[fan]
pin: EBBCan: PA1
kick_start_time: 0.5
off_below: 0.25

[heater_fan sb_hotend_fan]
pin: EBBCan: PA0
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[heater_bed]
heater_pin: PA1
sensor_type: Generic 3950
sensor_pin: PB1
max_power: 1.0
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

# Bed fan control: trick Klipper into thinking the bed fans are a chamber heater
# See https://discord.com/channels/460117602945990666/1021908552702505051/1129498299272011866
# Bed heater makes sure that the bed itself stays at a constant temperature and fans get PWMed 
# to draw varying amount of heat from the bed heater
#   heater_pin is what the bed fans plug into
#   sensor_pin is a thermistor somewhere in the chamber

[heater_generic heater_chamber]
heater_pin: PF8
sensor_type: Generic 3950
sensor_pin: PC5
control: pid
pid_Kp: 61.470837
pid_Ki: 0.5
pid_Kd: 0
pwm_cycle_time: 0.3
min_temp: -273.15
max_temp: 75
# If the bed fans overpower the bed heater and cause a thermal runaway shutdown - you can set
# a lower max_power to combat the issue.
max_power: 1.0

[verify_heater heater_chamber]
max_error: 120
check_gain_time: 120
hysteresis: 50
heating_gain: 1

[gcode_macro SET_CHAMBER]
gcode:
  {% set chamber_target = params.TARGET_CHAMBER|default(0)|float %}
  SET_HEATER_TEMPERATURE heater=heater_chamber target={chamber_target}

# Default MPX configuration starts again here

[temperature_sensor buildplate]
sensor_type: Generic 3950
sensor_pin: PB0
min_temp: -40
max_temp: 120

# Default MPX chamber thermistor configuration. Using this pin for 
# the chamber temperature control instead

# [temperature_sensor chamber]
# sensor_type: Generic 3950
# sensor_pin: PC5
# min_temp: -40
# max_temp: 100

[temperature_sensor EBB_NTC]
sensor_type: Generic 3950
sensor_pin: EBBCan: PA2
min_temp: -40
max_temp: 100

[temperature_sensor CB1]
sensor_type: temperature_host

[probe]
pin: ^EBBCan: PB5
#z_offset: 0
speed: 10.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.006
samples_tolerance_retries: 3

activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

# [safe_z_home]
# home_xy_position:150,150
# speed:100
# z_hop:1

[multi_pin controller_fans]
pins: PF7,PF9

[controller_fan electronics_bay_fans]
##  Controller fan
pin: multi_pin:controller_fans
# DK I turned this down from 0.4.  Fans are too loud
max_power: 0.25
kick_start_time: 0.5
heater: heater_bed

[heater_fan nevermore_fans]
#  Exhaust fan - Nevermore Filter
pin: PF6
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0
heater: heater_bed
heater_temp: 60
fan_speed: 1.0 

[z_tilt]
##  Use Z_TILT_ADJUST to level the bed
##  z_positions: Location of toolhead

## Uncomment below for 300mm build
z_positions:
   -50, 18
   150, 348
   350, 18
points:
   30, 5
   150, 245
   270, 5

##--------------------------------------------------------------------

speed: 200
horizontal_move_z: 15
retries: 5
retry_tolerance: 0.0075

[bed_mesh]
speed: 200
horizontal_move_z: 5
mesh_min: 10,10
mesh_max: 290,290
probe_count: 9,9
algorithm: bicubic
bicubic_tension: 0.2

[adxl345]
cs_pin: EBBCan: PB12
spi_software_sclk_pin: EBBCan: PB10
spi_software_mosi_pin: EBBCan: PB11
spi_software_miso_pin: EBBCan: PB2
axes_map: z,-y,x

[resonance_tester]
probe_points: 175, 175, 20
accel_chip: adxl345

[board_pins]
aliases:
    # EXP header
    EXP1_1=<5V>,
    EXP1_2=<GND>,
    EXP1_3=PF11,
    EXP1_4=PF12,
    EXP1_5=PF13,
    EXP1_6=PF14,
    EXP1_7=PF15,
    EXP1_8=PG0,
    EXP1_9=PG1,
    EXP1_10=PE7,
    EXP1_11=<RST>,
    EXP1_12=PE8,
    EXP1_13=PE14,
    EXP1_14=PE10,
    EXP1_15=PE11,
    EXP1_16=PE15,
    EXP1_17=PE12,
    EXP1_18=PE13

# Enable object exclusion
[exclude_object]

# Enable arcs support
[gcode_arcs]
# DK: Default was 0.3. I set it to 0.1 per https://discord.com/channels/460117602945990666/461133450636951552/1189073034099818506
resolution: 0.1

#####################################################################
#   Macros
#####################################################################
[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

# Filament motion sensor configuration
# Adapted from https://docs.vorondesign.com/community/howto/samwiseg0/btt_smart_filament_sensor.html
[filament_motion_sensor Filament_Sensor]
detection_length: 10.00 ; This can be adjusted to your desired level of sensitivity. 10 is a recommended value to prevent flow dropoff false triggers.
extruder: extruder
switch_pin: ^PC15
pause_on_runout: True ; This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below.
event_delay: 3.0
pause_delay: 0.5
runout_gcode:
    SET_DISPLAY_TEXT MSG="Runout Detected!"
    PAUSE
# insert_gcode:

[delayed_gcode DISABLEFILAMENTSENSOR] ; This will disable the sensor 1 second after klipper starts
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=Filament_Sensor ENABLE=0

[gcode_macro SFS_ENABLE] ; Needs to be included in PRINT_START
description: Enable filament sensor
gcode:
    SET_DISPLAY_TEXT MSG="Enabling the Filament Sensor"
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=Filament_Sensor ENABLE=1

[gcode_macro SFS_DISABLE] ; Needs to be inlcuded in PRINT_END and PRINT_CANCEL
description: Disable filament sensor
gcode:
    SET_DISPLAY_TEXT MSG="Disabling the Filament Sensor"
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=Filament_Sensor ENABLE=0

# Pause / Resume setup from Ellis as recommended by the Voron SFS setup
# https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/040d31c6daaed23c2a1a353545e7ee442a232f32/articles/useful_macros.md

# This bit must be specified to be able to use pause and resume in Klipper
[pause_resume]
recover_velocity: 50  ; The speed at which to return to the captured position (in mm/s). Default is 50.0 mm/s.

# M600 (Filament Change) Alias
# Allows pause to work natively with slicers that insert M600 for color changes. This just calls the pause macro (below).
[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SFS_DISABLE                                                                          ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SFS_ENABLE                                                                   ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}      ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

# This dumps all Klipper parameters to the g-code terminal. This helps to find Klipper system variables for use in macros
[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

# Filament Change Macros
# See https://github.com/rootiest/zippy-klipper_config/blob/master/extras/simple-m600.cfg

# Edit the default() value for LENGTH to the amount of retraction required to unload the filament
# Edit the default() value for TARGET # to the target extruder temperature used during filament change
[gcode_macro UNLOAD_FILAMENT]
gcode:
  {% set LENGTH = params.LENGTH|default(80)|float %} ; Unload length
  {% set TARGET = params.TARGET|default(252)|float %} ; Unload temperature

  SFS_DISABLE

  {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
  {% set min_temp = printer.configfile.settings.extruder.min_extrude_temp|int|default(252) %} ; Min safe temp
  {% if cur_temp|int < TARGET|int %} ; If current temp is below target
    SET_DISPLAY_TEXT MSG="Heating nozzle..."
    M109 S{TARGET} ; Heat nozzle to target temperature
  {% endif %}
  {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
    SET_DISPLAY_TEXT MSG="Below minimum temp. Heating extruder..."
    M109 S{min_temp|int} ; Heat up to min_extrude_temp
  {% endif %}
  G91 ; Relative positioning
  # Pre-unload
  G1 E5.0 F1200
  G1 E3.0 F1600
  G1 E-13.14 F7000
  # Unload
  G1 E-{LENGTH} F3000
  G90 ; Absolute postitioning

[gcode_macro LOAD_FILAMENT]
gcode:
  {% set SLOW = params.SLOW|default(30)|float %} ; Purge amount
  {% set FAST = params.FAST|default(70)|float %} ; Load length

  SFS_DISABLE

  {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
  {% set min_temp = printer.configfile.settings.extruder.min_extrude_temp|int|default(252) %} ; Min safe temp
  {% if params.TARGET is defined %} ; If current temp is below target
    {% set TARGET = params.TARGET|int %}
    {% if cur_temp|int < TARGET|int %}
      SET_DISPLAY_TEXT MSG="Heating nozzle"
      M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
  {% endif %}
  {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
    SET_DISPLAY_TEXT MSG="Below minimum temp. Heating extruder..."
    M109 S{min_temp|int} ; Heat up to min_extrude_temp
  {% endif %}
  SET_DISPLAY_TEXT MSG="Loading Filament"
  G91 ; Relative positioning
  G1 E25.0 F1000 ; pre-load
  G1 E{FAST} F2500 ; load up to hotend
  G4 P900 ; wait a moment
  G1 E{SLOW} F250 ; purge to change filament
  G90 ; Absolute postitioning

# DK Comment G32 out. Seemingly not used with jontek2 print start macro below
#
# [gcode_macro G32]
# gcode:
#    SAVE_GCODE_STATE NAME=STATE_G32
#    G90
#    G28
#    QUAD_GANTRY_LEVEL
#    G28
#    PARK
#    RESTORE_GCODE_STATE NAME=STATE_G32

#####################################################################
# print_start macro from https://github.com/jontek2/A-better-print_start-macro
# modified for bed fan macros
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  # DK Changed jontek2 from default 40 to 0
  {% set target_chamber = params.CHAMBER|default("0")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  SFS_ENABLE            # Enable the filament sensor

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  SET_DISPLAY_TEXT MSG="Homing."             # Displays info
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the requested bed temp is higher than 90c - if so then heat the bed and the chamber
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Wiping the nozzle."             # Displays info
    STATUS_CLEANING                                       # Sets SB-leds to heating-mode
    M106 S255                                             # Turns on the part cooling fan

    # G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    # DK Add Smart_Park macro for KAMP per https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging?tab=readme-ov-file#smart-park
    Smart_Park
    # M190 S{target_bed}                                  # Sets the target temp for the bed and wait until it gets there
    M140 S{target_bed}                                    # Sets the target temp for the bed but don't wait. We can KOMB the nozzle in the meantime
    M109 S{target_extruder}                               # Heats the nozzle to printing temp. We'll wait for this.
    KOMB                                                  # Let KOMB work its magic to clean the nozzle.
    M104 S0                                               # Turn off the extruder heater. No need to wait for this. We got other things to do.
    SET_DISPLAY_TEXT MSG="Heating bed to {target_bed}C"   # Displays info
    STATUS_HEATING                                        # Sets SB-leds to heating-mode
    M190 S{target_bed}                                    # Sets the target temp for the bed and wait until it gets there in prep for chamber heating.
    # DK This is from jontek2. Skip for the axial bed fan goodness
    # SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    # TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

    # DK Soak for a couple minutes before kicking in the bed fans to help prevent the heater PID from kicking out when fans kick in
    SET_DISPLAY_TEXT MSG="Heatsoak bed 1m at {target_bed}C"  # Displays info
    G4 P60000                                                # Waits 1 min for the bedtemp to soak

    # Axial fan goodness from https://discord.com/channels/460117602945990666/1021908552702505051/1129498299272011866
    SET_DISPLAY_TEXT MSG="Heating chamber to {target_chamber}C"  # Displays info
    {% if target_chamber > 0 and not printer["heater_generic heater_chamber"].temperature >= target_chamber|float%} # Wait for chamber temps if need be
            SET_CHAMBER target_chamber={target_chamber+1}  # +1 °C for faster temp target arrival
            TEMPERATURE_WAIT SENSOR="heater_generic heater_chamber" MINIMUM={target_chamber-0.1} # wait until chamber temp is very nearly reached
            SET_CHAMBER target_chamber={target_chamber} # set correct chamber target and let PID do its magic
    {% endif %}
    # In case the chamber was already heated, the above would have been skipped so set a value for it here
    {% if target_chamber > 0 %}
      SET_CHAMBER target_chamber={target_chamber}
    {% endif %}

  # TODO - This is out of line with the axial fan changes above.  Update this sometime.
  # If the requested bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Heating bed to {target_bed}C" # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    # DK Add Smart_Park macro for KAMP per https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging?tab=readme-ov-file#smart-park
    # G1 X{x_wait} Y{y_wait} Z15 F9000                  # Goes to center of the bed
    Smart_Park
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150C"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  G28 Z                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  #SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  #STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  #quad_gantry_level               # Levels the buildplate via QGL
  #G28 Z                           # Homes Z again after QGL

  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  # DK Add Smart_Park macro for KAMP per https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging?tab=readme-ov-file#smart-park
  # G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  Smart_Park
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # DK: Change the default jontek2 macro up for adaptive purge
  # Gets ready to print by doing a purge line and updating the SB-leds
  # SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  # STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  # G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  # G0 Z0.4                                          # Raises Z to 0.4
  # G91                                              # Incremental positioning 
  # G1 X100 E20 F1000                                # Purge line
  # G90                                              # Absolute position

  SET_DISPLAY_TEXT MSG="Line purge"                # Displays info
  STATUS_CLEANING                                  # Sets SB-leds to cleaning-mode
  LINE_PURGE                                       # KAMP Adaptive Purge

  # Time to print
  SET_DISPLAY_TEXT MSG="It's... SHOWTIME!!!"       # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    SFS_DISABLE                     ; Disable the filament sensor
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.005000, 0.011250, -0.008750, -0.001250
#*# 	  0.022500, 0.003750, -0.007500, 0.002500
#*# 	  0.027500, 0.032500, -0.001250, -0.001250
#*# 	  0.058750, 0.056250, 0.052500, 0.027500
#*# x_count = 4
#*# y_count = 4
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 110.39
#*# max_x = 190.07
#*# min_y = 109.54
#*# max_y = 191.02
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 59.552
#*# pid_ki = 2.796
#*# pid_kd = 317.116
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 23.992
#*# pid_ki = 2.580
#*# pid_kd = 55.781
#*#
#*# [probe]
#*# z_offset = -1.155
